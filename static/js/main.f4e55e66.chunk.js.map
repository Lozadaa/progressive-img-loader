{"version":3,"sources":["../../src/utils/Utils.js","../../src/components/Image.jsx","../../src/index.js","App.js","index.js"],"names":["ERROR","loadImage","src","callback","image","Image","props","alt","transitionTime","className","isPreview","CustomImageComponent","filterWithBlur","filter","duration","play","start","end","ImageLoader","srcPreview","loader","customImageComponent","useState","originalImage","setOriginalImage","previewImage","setPreviewImage","useEffect","Utils","isPreloader","isPossibleLoadThumbnail","PropTypes","string","App","Fragment","Avatar","ReactDOM","render","document","getElementById"],"mappings":"4PAAaA,EAAN,sBAMA,SAASC,EAAUC,EAAKC,GAC7B,KAAO,CACL,IAAMC,EAAQ,IAAd,MACAA,SAAe,WACb,GACED,MAGJC,UAAgB,WACd,GACED,MAGJC,QAEFD,KCVK,IAAME,EAAQ,SAACC,GAAU,IACvBJ,EAA4EI,EADrD,IAClBC,EAAuED,EADrD,MACqDA,EADrD,eACbE,OADa,UACOC,EAA8CH,EADrD,UACkBI,EAAmCJ,EADrD,UAC6BK,EAAwBL,EADrD,qBAGxBM,EAAiB,CAACC,OAAQ,aAE1BC,EAAWZ,MAHjB,EAGA,EACA,OACE,kBAAC,IAAD,cACE,6BACEa,MADF,EAEED,SAFF,EAGEE,MAHF,EAKEC,IAAKP,EAAYE,EATG,CAACC,OAAQ,YAY3BF,GAAwB,qBAAsBT,IAAtB,EAAgCK,IAAhC,EAA0CE,UAAWA,KAG5EE,GAAwB,yBAAKT,IAAL,EAAeK,IAAf,EAAyBE,UAAWA,OCjB1DS,EAAc,SAACZ,GAAU,IAC5BJ,EAAkEI,EADtC,IACvBa,EAA6Db,EADtC,WACXC,EAAiDD,EADtC,IACNc,EAA4Cd,EADtC,OACEG,EAAoCH,EADtC,UACae,EAAyBf,EADtC,uBAEMgB,mBAFN,MAE7BC,EAF6B,KAEdC,EAFc,OAGIF,mBAHJ,MAG7BG,EAH6B,KAGfC,EAHe,KAIpCC,qBAAU,WACR,GACEC,KAA4B,mBAASF,EAAT,MAE9B,GACEE,KAAqB,mBAASJ,EAAT,QALzBG,IAUA,IAAME,GAAeJ,IAAD,GAApB,EACMK,EAA0BL,IAAhC,EAEA,OACE,kBAAC,IAAD,cACMI,GADN,EAEMC,GAA2B,qBAAOvB,IAAP,EACOL,IADP,EAEOQ,WAFP,EAGOC,qBAHP,EAIOF,UAAWA,IAE7Cc,GAAiB,qBAAOhB,IAAP,EACOL,IADP,EAEOQ,WAFP,EAGOC,qBAHP,EAIOF,UAAWA,MAO7CS,YAAwB,CACtBhB,IAAK6B,IADiB,OAEtBZ,WAAYY,IAFU,OAGtBX,OAAQW,IAHc,QAItBxB,IAAKwB,IAJiB,OAKtBtB,UAAWsB,IAAUC,Q,YCzCRC,MAVH,IAEV,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,CAAahC,IAAK,KACLiB,WAAY,KACZE,qBAAsBc,OCHvCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.f4e55e66.chunk.js","sourcesContent":["export const ERROR = \"ERROR_LOADING_IMAGE\";\n/**\n * This method execute the magic when the image is loaded\n * @param src\n * @param callback\n */\nexport function loadImage(src, callback){\n  if(src){\n    const image = new Image();\n    image.onload = function () {\n      if(callback){\n        callback(src);\n      }\n    }\n    image.onerror = function () {\n      if(callback){\n        callback(ERROR);\n      }\n    }\n    image.src = src;\n  }\n  callback(ERROR);\n}\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport {Animate} from \"react-simple-animate\";\nimport {ERROR} from \"../utils/Utils\";\n\n/**\n * Custom component to manage logic of the images :)\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nexport const Image = (props) => {\n  const {src, alt, transitionTime = 3, className, isPreview, CustomImageComponent} = props;\n  const transitionTimeError = 0;\n  const filterWithBlur = {filter: 'blur(5px)'};\n  const filterWithoutBlur = {filter: 'blur(0)'};\n  const duration = src === ERROR ? transitionTimeError : transitionTime;\n  return (\n    <React.Fragment>\n      <Animate\n        play={true}\n        duration={duration}\n        start={filterWithBlur}\n        // if is a preview image we don't wanna remove the blur effect\n        end={isPreview ? filterWithBlur : filterWithoutBlur}\n      >\n        { // With their image component\n          CustomImageComponent && <CustomImageComponent src={src} alt={alt} className={className}/>\n        }\n        { // With our image component\n          !CustomImageComponent && <img src={src} alt={alt} className={className}/>\n        }\n      </Animate>\n    </React.Fragment>\n  );\n\n}\n\n\n\n","import React, {useEffect, useState} from \"react\";\nimport * as Utils from \"./utils/Utils.js\"\nimport PropTypes from \"prop-types\";\n\nimport {Image} from \"./components/Image.jsx\";\n\n/**\n * The awesome, magic, beautiful (ðŸ˜›) element that preload blurred your thumb images and then load the\n * original quality image with transition effect to show it!\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nexport const ImageLoader = (props) => {\n  const { src, srcPreview, alt, loader, className, customImageComponent } = props;\n  const [originalImage, setOriginalImage] = useState(null);\n  const [previewImage, setPreviewImage] = useState(null);\n  useEffect(() => {\n    if(!previewImage){\n      Utils.loadImage(srcPreview, (src) => setPreviewImage(src));\n    }\n    if(!originalImage){\n      Utils.loadImage(src, (src) => setOriginalImage(src));\n    }\n\n  }, [])\n\n  const isPreloader = !previewImage && !originalImage && loader;\n  const isPossibleLoadThumbnail = previewImage && !originalImage\n\n  return (\n    <React.Fragment>\n        { isPreloader && loader }\n        { isPossibleLoadThumbnail && <Image alt={alt}\n                                            src={previewImage}\n                                            isPreview={true}\n                                            CustomImageComponent={customImageComponent}\n                                            className={className}\n        /> }\n        { originalImage && <Image alt={alt}\n                                  src={originalImage}\n                                  isPreview={false}\n                                  CustomImageComponent={customImageComponent}\n                                  className={className}\n        /> }\n    </React.Fragment>\n  );\n\n}\n\nImageLoader.propTypes = {\n  src: PropTypes.string,\n  srcPreview: PropTypes.string,\n  loader: PropTypes.element,\n  alt: PropTypes.string,\n  className: PropTypes.string,\n}\n","import React from 'react'\nimport { ImageLoader } from 'progressive-img-loader'\nimport Avatar from \"@material-ui/core/Avatar\";\n\nconst App = () => {\n  return (\n  <React.Fragment>\n    <ImageLoader src={null}\n                 srcPreview={null}\n                 customImageComponent={Avatar}/>\n  </React.Fragment>\n  );\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}